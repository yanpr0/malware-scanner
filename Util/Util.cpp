#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <string_view>
#include <sys/socket.h>
#include <sys/types.h>
#include <sys/un.h>
#include <unistd.h>

#include "Util.hpp"
#include "../ScannerResponse.hpp"
#include "../SocketName.hpp"


ScannerResponse Util::MakeRequest(std::string_view pathname) {
    int socket_fd = socket(AF_UNIX, SOCK_STREAM, 0);
    if (socket_fd == -1) {
        std::perror("socket");
        std::exit(EXIT_FAILURE);
    }

    struct sockaddr_un address;

    std::memset(&address, 0, sizeof(struct sockaddr_un));

    address.sun_family = AF_UNIX;

    strncpy(address.sun_path, socket_name, sizeof(address.sun_path) - 1);

    if (connect(socket_fd, reinterpret_cast<const struct sockaddr*>(&address), sizeof(struct sockaddr_un)) == -1) {
        close(socket_fd);
        std::perror("connect");
        std::exit(EXIT_FAILURE);
    }

    if (write(socket_fd, pathname.data(), pathname.size()) != pathname.size()) {
        close(socket_fd);
        std::perror("write");
        std::exit(EXIT_FAILURE);
    }


    ScannerResponse res;

    if (read(socket_fd, reinterpret_cast<void*>(&res), sizeof(res)) != sizeof(res)) {
        close(socket_fd);
        std::perror("read");
        std::exit(EXIT_FAILURE);
    }

    return res;
}

