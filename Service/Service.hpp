#pragma once

#include <cstddef>
#include <cstdio>
#include <filesystem>
#include <queue>
#include <signal.h>
#include <thread>
#include <vector>

#include "../ScannerResponse.hpp"


class Service {
  public:
    Service();

    Service(const Service&) = delete;

    Service& operator=(const Service&) = delete;

    void Run();

  private:
    static void ProceedRequest(int client_fd);

    static void ProceedFiles(std::vector<std::filesystem::path>* files, AtomicStats* stats, int start_index, int step);

    static void HandleSignal(int) { got_signal_ = 1; }

    inline static volatile sig_atomic_t got_signal_ = 0;

    std::queue<std::thread> connections_;

    int service_fd_ = -1;
};

