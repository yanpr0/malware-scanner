#include <cstddef>
#include <cstdio>
#include <memory>
#include <queue>
#include <string_view>
#include <utility>
#include <vector>

#include "Scanner.hpp"


struct Automaton::State {
    bool is_terminal_ = false;
    std::shared_ptr<State> next_by_symbol_[alphabet_size];
    std::weak_ptr<State> next_state_[alphabet_size];
    std::weak_ptr<State> short_suffix_link_;
    std::weak_ptr<State> suffix_link_;
    std::vector<std::size_t> string_numbers_;
};


void Automaton::BuildTrie(const std::vector<std::string_view>& strings) {
    start_ = std::make_shared<State>();
    for (std::size_t i = 0; i < strings.size(); ++i) {
        std::shared_ptr<State> state = start_;
        for (unsigned char symbol : strings[i]) {
            symbol -= min_symbol;
            if (state->next_by_symbol_[symbol] == nullptr) {
                state->next_by_symbol_[symbol] = std::make_shared<State>();
            }
            state = state->next_by_symbol_[symbol];
        }
        state->is_terminal_ = true;
        state->string_numbers_.push_back(i);
    }
}


void Automaton::InitAutomatonBuild(std::queue<std::shared_ptr<State>>& queue) {
    start_->suffix_link_ = start_->short_suffix_link_ = start_;
    for (std::size_t i = 0; i < alphabet_size; ++i) {
        if (start_->next_by_symbol_[i] == nullptr) {
            start_->next_state_[i] = start_;
        } else {
            start_->next_state_[i] = start_->next_by_symbol_[i];
        }
    }
    for (auto& state : start_->next_by_symbol_) {
        if (state != nullptr) {
            state->suffix_link_ = state->short_suffix_link_ = start_;
            for (std::size_t i = 0; i < alphabet_size; ++i) {
                if (state->next_by_symbol_[i] == nullptr) {
                    state->next_state_[i] = start_->next_state_[i];
                } else {
                    state->next_state_[i] = state->next_by_symbol_[i];
                }
            }
            queue.push(state);
        }
    }
}


void Automaton::BuildAutomaton(std::queue<std::shared_ptr<State>>& queue) {
    while (!queue.empty()) {
        std::shared_ptr<State> state = queue.front();
        queue.pop();
        for (std::size_t i = 0; i < alphabet_size; ++i) {
            std::shared_ptr<State> next = state->next_by_symbol_[i];
            if (next != nullptr) {
                next->suffix_link_ = state->suffix_link_.lock()->next_state_[i];
                next->short_suffix_link_ =
                    next->suffix_link_.lock()->is_terminal_ ?
                    next->suffix_link_.lock() :
                    next->suffix_link_.lock()->short_suffix_link_.lock();
                next->string_numbers_.insert(
                next->string_numbers_.end(),
                next->short_suffix_link_.lock()->string_numbers_.begin(),
                next->short_suffix_link_.lock()->string_numbers_.end());
                for (std::size_t i = 0; i < alphabet_size; ++i) {
                    if (next->next_by_symbol_[i] == nullptr) {
                        next->next_state_[i] = next->suffix_link_.lock()->next_state_[i];
                    } else {
                        next->next_state_[i] = next->next_by_symbol_[i];
                    }
                }
                queue.push(next);
            }
        }
    }
}


Automaton::Automaton(const std::vector<std::string_view>& strings) {
    BuildTrie(strings);
    std::queue<std::shared_ptr<State>> queue;
    InitAutomatonBuild(queue);
    BuildAutomaton(queue);
    current_state_ = start_;
}


void Automaton::GoToNextState(unsigned char symbol) {
    current_state_ = current_state_->next_state_[symbol - min_symbol].lock();
}


void Automaton::GoToStartState() {
    current_state_ = start_;
}


const std::vector<std::size_t>& Automaton::GetFoundStringsNumbers() const {
    return current_state_->string_numbers_;
}


Scanner::Scanner(const std::vector<std::string_view>& patterns) : automaton_(std::make_shared<Automaton>(patterns)) {}


std::pair<bool, std::size_t> Scanner::FindFirstMatchIn(FILE* file) const {
    automaton_->GoToStartState();

    int c = 0;

    while ((c = fgetc(file)) != EOF) {
        automaton_->GoToNextState(c);

        const auto& found = automaton_->GetFoundStringsNumbers();

        if (!found.empty()) {
            return {true, found[0]};
        }
    }

    return {false, 0};
}

