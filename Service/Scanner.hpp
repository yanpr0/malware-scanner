#pragma once

#include <cstddef>
#include <cstdio>
#include <memory>
#include <numeric>
#include <queue>
#include <string_view>
#include <vector>

/*
реализация алгоритма Ахо-Корасик, для быстрого поиска сразу нескольких строк;
делать поиск тем же КМП на файле в, например, 25 GB будет существенно менее эффективно
*/

class Automaton {
  public:
    Automaton(const std::vector<std::string_view>& strings);

    void GoToNextState(unsigned char symbol);

    void GoToStartState();

    const std::vector<std::size_t>& GetFoundStringsNumbers() const;

    static constexpr std::size_t alphabet_size = std::numeric_limits<unsigned char>::max() + 1;

  private:
    struct State;

    void BuildTrie(const std::vector<std::string_view>& strings);

    void InitAutomatonBuild(std::queue<std::shared_ptr<State>>& queue);

    void BuildAutomaton(std::queue<std::shared_ptr<State>>& queue);

    static constexpr unsigned char min_symbol = 0;

    std::shared_ptr<State> start_;

    std::shared_ptr<State> current_state_;
};


class Scanner {
  public:
    Scanner(const std::vector<std::string_view>& patterns);

    std::pair<bool, std::size_t> FindFirstMatchIn(FILE* file) const;

  private:
    std::shared_ptr<Automaton> automaton_;
};

